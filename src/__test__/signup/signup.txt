import '@testing-library/jest-dom'
import React from 'react'
import '@testing-library/jest-dom'
import {
  render,
  fireEvent,
  getByTestId,
  waitFor,
  waitForDomChange,
} from '@testing-library/react'

import { Route, Switch, Router } from 'react-router-dom'
import { createMemoryHistory } from 'history'
import { MockedProvider } from '@apollo/react-testing'
import '@testing-library/jest-dom/extend-expect'
import { SignupPage, SIGNUP } from '../../pages/SignupPage'
import { act } from 'react-dom/test-utils'

/**
 * 1) User can signup with right credentials
 *  - Type username
 *  - Type password
 *  - Button must be enabled
 *  - Click Signup
 *  - Loading is spinning
 *  - Success Toaster message
 *  - Intercepted api request
 *  - Intercepted succesful response
 */

const testUser = { email: 'test@user.com', password: 'Lampone02!' }
const mockSignupMutation = [
  {
    request: {
      query: SIGNUP,
      variables: {
        email: testUser.email,
        password: testUser.password,
      },
    },
    result: {
      data: {
        token: 'valid token',
      },
    },
  },
]

const SignupComponent = () => (
  <MockedProvider mocks={mockSignupMutation} addTypename={false}>
    <SignupPage />
  </MockedProvider>
)

describe('<SignupPage />', () => {
  it('renders the component without errors', () => {
    const { container } = render(<SignupComponent />)
    expect(container.innerHTML).toMatch('Sign up')
  })

  it('let user signup with valid credentials', async () => {
    const { container, getByLabelText, getByTestId } = render(
      <SignupComponent />
    )
    const emailInput = getByLabelText('Email')
    const passwordInput = getByLabelText('Password')
    const confirmPasswordInput = getByLabelText('Confirm Password')
    const submitButton = getByTestId('CustomButton')

    // Expect submit button to be disabled
    expect(submitButton).toHaveTextContent('Sign up')
    expect(submitButton).toBeDisabled()
    // Type user credentials
    await act(async () => {
      fireEvent.change(emailInput, { target: { value: testUser.email } })
      fireEvent.change(passwordInput, { target: { value: testUser.password } })
      fireEvent.change(confirmPasswordInput, {
        target: { value: testUser.password },
      })
    })
  })
})
